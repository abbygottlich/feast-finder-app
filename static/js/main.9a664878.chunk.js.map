{"version":3,"sources":["components/SignUp.js","components/SignIn.js","components/SignUpSignIn.js","Constants/index.js","state.js","components/Header.js","Actions/index.js","components/ReturnedRestaurant.js","Containers/ReturnedRestaurantContainer.js","components/RestaurantInfo.js","Containers/RestaurantInfoContainer.js","components/Home.js","components/Favorites.js","components/Dislikes.js","App.js","serviceWorker.js","Reducers/index.js","index.js"],"names":["SignUp","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","username","password","confirmPassword","event","preventDefault","props","onSignUp","_this2","react_default","a","createElement","autoComplete","onSubmit","handleSubmit","bind","className","type","name","placeholder","onChange","e","setState","defineProperty","target","value","Component","SignIn","onSignIn","SignUpSignIn","es","bsStyle","error","xs","renderError","components_SignIn","components_SignUp","RESTAURANT_SUCCESS","RESTAURANT_REQUEST","src_state","returnedRestaurant","isLoading","Header","handleChange","city","USstate","toggle","menuIcon","showError","showMessage","assertThisInitialized","restaurantResult","toggleHandler","showMenu","restaurantData","fetchRestaurants","react_router_dom","to","onClick","onSignOut","maxLength","connect","dispatch","apiUrl","concat","process","stateName","toUpperCase","urlToFetch","types","fetch","then","res","json","catch","ReturnedRestaurant","restaurantSaved","saveRating","alt","src","rating","_this3","restaurant","restaurantBody","genre","categories","title","price","location","display_address","join","method","body","JSON","stringify","headers","Content-Type","setTimeout","result","bgImage","backgroundImage","image_url","backgroundSize","backgroundRepeat","style","loadRatingButtons","RestaurantInfo","ReturnedRestaurantContainer","Home","components_Header","showNavItems","authenticated","RestaurantInfoContainer","Favorites","favorites","selectedRestaurant","fetchRatings","restaurants","removeItem","id","status","moveToDislikes","handleClick","textContent","map","f","Fragment","_id","Dislikes","dislikes","moveToLikes","App","signUpSignInError","localStorage","getItem","handleSignUp","credentials","trim","err","console","log","token","setItem","handleSignIn","data","handleSignOut","renderSignUpSignIn","components_SignUpSignIn","basename","react_router","exact","path","component","components_Home","renderApp","Boolean","window","hostname","match","rootReducer","combineReducers","arguments","length","undefined","action","actionNames","oldFetch","url","settings","objectSpread","authorization","enhancer","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","applyMiddleware","thunk","store","createStore","reducers","ReactDOM","render","react_redux_es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9a664878.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nclass SignUp extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      username: \"\",\n      password: \"\",\n      confirmPassword: \"\"\n    };\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    this.props.onSignUp({\n      username: this.state.username,\n      password: this.state.password,\n      confirmPassword: this.state.confirmPassword\n    })\n  }\n\n  render() {\n    return (\n      <form autoComplete=\"off\" onSubmit={this.handleSubmit.bind(this)}>\n        <div className=\"title\">Sign Up</div>\n        <input type=\"email\" name=\"username\" placeholder=\"Username\" className=\"username-input\"\n          onChange={e => {\n            this.setState({ [e.target.name]: e.target.value });\n          }}\n          value={this.state.username}\n        >\n        </input>\n        <input\n          type=\"password\" name=\"password\" placeholder=\"Password\" className=\"password-input\"\n          onChange={e => {\n            this.setState({ [e.target.name]: e.target.value });\n          }}\n          value={this.state.password}\n        >\n        </input>\n        <input type=\"password\" name=\"confirmPassword\" placeholder=\"Confirm Password\" className=\"confirm-password-input\"\n          onChange={e => {\n            this.setState({ [e.target.name]: e.target.value });\n          }}\n          value={this.state.confirmPassword}\n        >\n        </input>\n        <button className=\"login-button\" type=\"submit\">Sign Up</button>\n      </form>\n    );\n  }\n}\n\nSignUp.propTypes = {\n  onSignUp: PropTypes.func.isRequired\n};\n\nexport default SignUp;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nclass SignIn extends Component {\n    constructor() {\n        super();\n\n        this.state = {\n            username: \"\",\n            password: \"\"\n        };\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n        this.props.onSignIn({\n            username: this.state.username,\n            password: this.state.password\n        })\n    }\n\n    render() {\n        return (\n            <form autoComplete=\"off\" onSubmit={this.handleSubmit.bind(this)}>\n                <div className=\"title\">Sign In</div>\n                <input type=\"email\" name=\"username\" placeholder=\"Username\" className=\"username-input\"\n                    onChange={e => {\n                        this.setState({ [e.target.name]: e.target.value });\n                    }}\n                    value={this.state.username}\n                >\n                </input>\n                <input type=\"password\" name=\"password\" placeholder=\"Password\" className=\"password-input\"\n                    onChange={e => {\n                        this.setState({ [e.target.name]: e.target.value });\n                    }}\n                    value={this.state.password}\n                >\n                </input>\n                <button className=\"login-button\" type=\"submit\">Sign In</button>\n            </form>\n        );\n    }\n}\n\nSignIn.propTypes = {\n    onSignIn: PropTypes.func.isRequired\n};\n\nexport default SignIn;","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Tabs, Tab, Row, Col, Alert } from \"react-bootstrap\";\nimport SignUp from \"./SignUp\";\nimport SignIn from \"./SignIn\";\n\nclass SignUpSignIn extends Component {\n\n  renderError() {\n    return (\n      <Alert bsStyle=\"danger\">\n        <div className=\"error-message\">{this.props.error}</div>\n      </Alert>\n    );\n  }\n\n  render() {\n    return (\n      <Row>\n        <Col xs={8} >\n          <div className=\"login-page\">\n            <div className=\"welcome\">\n              <div className=\"logo\"></div>\n              <div className=\"welcome-text\">Welcome to Feast Finder!</div>\n            </div>\n            {this.props.error && this.renderError()}\n            <div className=\"login-sections\">\n              <div className=\"signin-section\">\n                <SignIn onSignIn={this.props.onSignIn} />\n              </div>\n              <div className=\"signup-section\">\n                <SignUp onSignUp={this.props.onSignUp} />\n              </div>\n            </div>\n          </div>\n        </Col>\n      </Row>\n    )\n  }\n}\n\nSignUpSignIn.propTypes = {\n  error: PropTypes.string,\n  onSignUp: PropTypes.func.isRequired,\n  onSignIn: PropTypes.func.isRequired\n};\n\nexport default SignUpSignIn;\n","export const RESTAURANT_SUCCESS = 'RESTAURANT_SUCCESS';\nexport const RESTAURANT_REQUEST = 'RESTAURANT_REQUEST';\nexport const RESTAURANT_FAIL = 'RESTAURANT_FAIL';\nexport const INPUT_FAIL = 'INPUT_FAIL';\n","export default {\n    returnedRestaurant: null,\n    isLoading: 1\n}","import React, { Component } from 'react';\nimport * as action from \"../Actions\";\nimport { connect } from 'react-redux';\nimport { Link } from \"react-router-dom\";\n\nclass Header extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            city: \"\",\n            USstate: \"\",\n            returnedRestaurant: false,\n            toggle: false,\n            menuIcon: \"menu\",\n            showError: false,\n            showMessage: true\n        };\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.restaurantResult = this.restaurantResult.bind(this);\n        this.toggleHandler = this.toggleHandler.bind(this);\n        this.showMenu = this.showMenu.bind(this);\n    }\n\n    // setting the state equal to what's being typed inside the form fields\n    handleChange = name => e => {\n        const value = e.target.value\n        this.setState({\n            [name]: value\n        })\n    };\n\n    restaurantResult(restaurantData) {\n        return {\n            type: 'RESTAURANT_RESULT',\n            restaurantData\n        }\n    }\n\n    handleSubmit(e) {\n        // prevents the form from being refreshed before it gets submitted\n        e.preventDefault()\n        if (this.state.city === \"\" || this.state.USstate === \"\") {\n            this.setState({\n                showError: true\n            })\n        } else {\n            // fetching from the backend API\n            this.props.fetchRestaurants(this.state.city, this.state.USstate)\n            this.setState({\n                returnedRestaurant: true,\n                showMessage: false\n            })\n        }\n    }\n\n    toggleHandler() {\n        if (this.state.toggle === false) {\n            this.setState({\n                toggle: true,\n                menuIcon: \"x\"\n            })\n        } else {\n            this.setState({\n                toggle: false,\n                menuIcon: \"menu\"\n            })\n        }\n    }\n\n    showMenu() {\n        if (this.state.toggle === true) {\n            return (\n                <div className=\"menu-block\">\n                    <Link to=\"/favorites\" className=\"my-favorites-button\">\n                        <div className=\"menu-text\">My Favorites</div>\n                    </Link>\n                    <Link to=\"/dislikes\" className=\"my-dislikes-button\">\n                        <div className=\"menu-text\">My Dislikes</div>\n                    </Link>\n                    <div className=\"sign-out-button\">\n                        <div onClick={this.props.onSignOut} className=\"menu-text\">Sign Out</div>\n                    </div>\n                </div>\n            )\n        } else {\n            return null\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <div className=\"header\">\n                    <div className=\"logo-white\"></div>\n                    <form className=\"form\" onSubmit={this.handleSubmit} autoComplete=\"off\">\n                        <div className=\"form-fields\">\n                            <input name=\"city\" value={this.state.city} placeholder=\"City\" onChange={this.handleChange(\"city\")} className=\"city-name\"></input>\n                            <input name=\"USstate\" value={this.state.USstate} placeholder=\"State\" onChange={this.handleChange(\"USstate\")} className=\"state-name\" maxLength=\"2\"></input>\n                            <button className=\"submit-button\" type=\"submit\">Find a Feast!</button>\n                        </div>\n                    </form>\n                    <button className={this.state.menuIcon} onClick={this.toggleHandler}></button>\n                </div>\n                {\n                    this.state.showError && !this.state.returnedRestaurant ? <div className=\"retrieve-message\">Please type in your city and state to retrieve a suggestion.</div>\n                        : null\n                }\n                <div>{this.showMenu()}</div>\n            </div>\n        )\n    }\n}\n\nexport default connect(\n    null,\n    { fetchRestaurants: action.fetchRestaurant }\n)(Header)","import * as types from '../Constants'\nimport state from '../state';\n\nexport const fetchRestaurant = (city, USstate) => dispatch => {\n    if (city && USstate) {\n        const apiUrl = `${process.env.REACT_APP_API_URL}/restaurants/`\n        const stateName = USstate.toUpperCase()\n        const params = city + \",\" + stateName\n        const urlToFetch = apiUrl + params\n\n        // this dispatch is sending a signal that the fetch is starting\n        dispatch({\n            type: types.RESTAURANT_REQUEST,\n            value: state.isLoading + 1\n        })\n        fetch(urlToFetch)\n            .then(res => res.json())\n            .then(restaurantData =>\n                dispatch({\n                    type: types.RESTAURANT_SUCCESS,\n                    value: restaurantData\n                })\n\n\n            ).then(\n                dispatch({\n                    type: types.RESTAURANT_SUCCESS,\n                    value: state.isLoading - 1\n                })\n            )\n            .catch(error =>\n                dispatch({\n                    type: types.RESTAURANT_FAIL\n                })\n            )\n    }\n}","import React, { Component } from 'react';\n\nclass ReturnedRestaurant extends Component {\n\n    state = {\n        restaurantSaved: false\n    }\n\n    // all props in this file coming from redux\n\n    loadRatingButtons() {\n        if (this.props.returnedRestaurant) {\n            return <div className=\"rating-buttons\">\n                <img onClick={() => this.saveRating(\"like\")} className=\"like-button\" alt=\"like-button\" src=\"https://image.flaticon.com/icons/svg/126/126473.svg\"></img>\n                <img onClick={() => this.saveRating(\"dislike\")} className=\"dislike-button\" alt=\"dislike-button\" src=\"https://image.flaticon.com/icons/svg/126/126504.svg\"></img>\n            </div>\n        }\n    }\n\n    saveRating(rating) {\n        const restaurant = this.props.returnedRestaurant\n        const restaurantBody = {\n            name: restaurant.name,\n            genre: restaurant.categories[0].title,\n            price: restaurant.price,\n            location: restaurant.location.display_address.join(\" \"),\n            rating: rating\n        }\n        fetch(`${process.env.REACT_APP_API_URL}/restaurants`, {\n            method: \"POST\",\n            body: JSON.stringify(restaurantBody),\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        })\n            .then(res => res.json())\n            .then(restaurantData => {\n            })\n            .then(this.setState({\n                restaurantSaved: true\n            }))\n            // resetting restaurantSaved to false after 1 second to show saved message again\n            .then(setTimeout(() => {\n                this.setState({ restaurantSaved: false });\n            }, 1000))\n    }\n\n    render() {\n\n        const result = this.props.returnedRestaurant\n\n        const bgImage = {\n            backgroundImage: \"url(\" + result.image_url + \")\",\n            backgroundSize: \"cover\",\n            backgroundRepeat: \"no-repeat\"\n        };\n\n        return <div className=\"restaurant-info\">\n\n            <div className=\"result-image\" style={bgImage}>\n                <div className=\"restaurant-info-and-overlay\">\n                    <div className=\"restaurant-text-info\">\n                        <div className=\"text\">\n                            <div className=\"result-name\">{result.name}</div>\n                            <div className=\"result-category\">{result.categories[0].title}</div>\n                            <div className=\"result-price\">{result.price}</div>\n                            <div className=\"result-location\">{result.location.display_address.join(\" \")}</div>\n                            {this.state.restaurantSaved === true ? <div className=\"saved\">Saved!</div> : null}\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n            <div className=\"messages-and-buttons\">\n                <div className=\"regenerate-message\">Don't like your result? Click the 'Find A Feast!' button again.</div>\n                <div className=\"rating-message\">Already been here? Give it a thumbs up or thumbs down and the rating will be saved to your profile.</div>\n                <div>{this.loadRatingButtons()}</div>\n            </div>\n        </div>\n    }\n}\n\nexport default ReturnedRestaurant;","import ReturnedRestaurant from \"../components/ReturnedRestaurant\";\nimport { connect } from 'react-redux';\n\n// this is passing state into ReturnedRestaurant as props\nfunction mapStateToProps(state) {\n    return {\n        returnedRestaurant: state.returnedRestaurant,\n        isLoading: state.isLoading\n    }\n}\n\nexport default connect(mapStateToProps, null)(ReturnedRestaurant)","import React, { Component } from 'react';\nimport ReturnedRestaurantContainer from \"../Containers/ReturnedRestaurantContainer\";\n\nclass RestaurantInfo extends Component {\n\n    render() {\n        if (!this.props.returnedRestaurant && this.props.isLoading === 2) {\n            return <div className=\"loading-message\">Loading...</div>\n        }\n        else if (this.props.returnedRestaurant && this.props.isLoading === 2) {\n            return <ReturnedRestaurantContainer />\n        } else return <div className=\"hungry-message\">Hungry? Type in your city and state and we'll tell you where to go!</div>\n    }\n}\n\nexport default RestaurantInfo;","import RestaurantInfo from \"../components/RestaurantInfo\";\nimport { connect } from 'react-redux';\n\n// this is passing state into RestaurantInfo as props\nfunction mapStateToProps(state) {\n    return {\n        returnedRestaurant: state.returnedRestaurant,\n        isLoading: state.isLoading\n    }\n}\n\nexport default connect(mapStateToProps, null)(RestaurantInfo)","import React, { Component } from 'react';\nimport Header from \"../components/Header\";\nimport RestaurantInfoContainer from \"../Containers/RestaurantInfoContainer\";\n\nclass Home extends Component {\n\n    render() {\n\n        return (\n            <div className=\"App\">\n                <div className=\"header-component\">\n                    <Header onSignOut={this.props.onSignOut} showNavItems={this.props.authenticated} />\n                </div>\n                <div className=\"restaurant-info-component\">\n                    <RestaurantInfoContainer />\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Home;","import React, { Component } from 'react';\nimport { Link } from \"react-router-dom\";\n\nclass Favorites extends Component {\n\n    state = {\n        favorites: [],\n        selectedRestaurant: null\n    }\n\n    componentDidMount() {\n        this.fetchRatings('like')\n    }\n\n    fetchRatings = (rating) => {\n        fetch(`${process.env.REACT_APP_API_URL}/restaurants/` + rating)\n            .then(res => res.json())\n            .then(restaurants => {\n                this.setState({\n                    favorites: restaurants\n                })\n            })\n    }\n\n    removeItem = (id) => {\n        const fetchRatings = this.fetchRatings\n        fetch(`${process.env.REACT_APP_API_URL}/restaurants/` + id, {\n            method: \"DELETE\"\n        })\n            .then(status => {\n                const rating = \"like\"\n                fetchRatings(rating)\n            })\n    }\n\n    moveToDislikes = (restaurant) => {\n        const fetchRatings = this.fetchRatings\n        restaurant.rating = \"dislike\"\n        fetch(`${process.env.REACT_APP_API_URL}/restaurants`, {\n            method: \"PUT\",\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify(restaurant)\n        })\n            .then(res => res.json())\n            .then(restaurantData => {\n                fetchRatings()\n            })\n    }\n\n    handleClick = e => {\n        this.setState({\n            selectedRestaurant: e.target.textContent === this.state.selectedRestaurant ? null : e.target.textContent\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"restaurant-list-bg\">\n                <Link to=\"/\">\n                    <div className=\"back-arrow\"></div>\n                </Link>\n                <div className=\"rating-title\">Favorites</div>\n                <div className=\"restaurant-list\">{this.state.favorites.map(f =>\n                    <React.Fragment>\n\n                        <div className=\"restaurant-name\" onClick={this.handleClick}>{f.name}</div>\n\n                        {f.name === this.state.selectedRestaurant ?\n\n                            <React.Fragment>\n                                <div className=\"rating-restaurant-info\">\n                                    <div>{f.genre}</div>\n                                    <div>{f.price}</div>\n                                    <div>{f.location}</div>\n                                </div>\n                                <div className=\"buttons\">\n                                    <div onClick=\"document.location.reload(true)\">\n                                    </div>\n                                    <button onClick={() => { this.removeItem(f._id) }} className=\"button\">Remove</button>\n                                    <button onClick={() => { this.moveToDislikes(f) }} className=\"button\">Move to Dislikes</button>\n                                </div>\n                            </React.Fragment> : null}\n\n                    </React.Fragment>)}</div>\n\n            </div>\n        )\n    }\n}\n\nexport default Favorites;","import React, { Component } from 'react';\nimport { Link } from \"react-router-dom\";\n\nclass Dislikes extends Component {\n\n    state = {\n        dislikes: [],\n        selectedRestaurant: null\n    }\n\n    componentDidMount() {\n        this.fetchRatings('dislike')\n    }\n\n    fetchRatings = (rating) => {\n        fetch(`${process.env.REACT_APP_API_URL}/restaurants/` + rating)\n            .then(res => res.json())\n            .then(restaurants => {\n                this.setState({\n                    dislikes: restaurants\n                })\n            })\n    }\n\n    removeItem = (id) => {\n        const fetchRatings = this.fetchRatings\n        fetch(`${process.env.REACT_APP_API_URL}/restaurants/` + id, {\n            method: \"DELETE\"\n        })\n            .then(status => {\n                const rating = \"dislike\"\n                fetchRatings(rating)\n            })\n    }\n\n    moveToLikes = (restaurant) => {\n        const fetchRatings = this.fetchRatings\n        restaurant.rating = \"like\"\n        fetch(`${process.env.REACT_APP_API_URL}/restaurants`, {\n            method: \"PUT\",\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify(restaurant)\n        })\n            .then(res => res.json())\n            .then(restaurantData => {\n                fetchRatings()\n            })\n    }\n\n    handleClick = e => {\n        this.setState({\n            selectedRestaurant: e.target.textContent === this.state.selectedRestaurant ? null : e.target.textContent\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"restaurant-list-bg\">\n                <Link to=\"/\">\n                    <div className=\"back-arrow\"></div>\n                </Link>\n                <div className=\"rating-title\">Dislikes</div>\n                <div className=\"restaurant-list\">{this.state.dislikes.map(f =>\n                    <React.Fragment>\n\n                        <div className=\"restaurant-name\" onClick={this.handleClick}>{f.name}</div>\n\n                        {f.name === this.state.selectedRestaurant ?\n\n                            <React.Fragment>\n                                <div className=\"rating-restaurant-info\">\n                                    <div>{f.genre}</div>\n                                    <div>{f.price}</div>\n                                    <div>{f.location}</div>\n                                </div>\n                                <div className=\"buttons\">\n                                    <button onClick={() => { this.removeItem(f._id) }} className=\"button\">Remove</button>\n                                    <button onClick={() => { this.moveToLikes(f) }} className=\"button\">Move to Likes</button>\n                                </div>\n                            </React.Fragment> : null}\n\n                    </React.Fragment>)}</div>\n            </div>\n        )\n    }\n}\n\nexport default Dislikes;","import React, { Component } from 'react';\nimport './App.css';\nimport SignUpSignIn from \"./components/SignUpSignIn\";\nimport { Route, BrowserRouter as Router } from \"react-router-dom\";\nimport Home from \"./components/Home\";\nimport Favorites from \"./components/Favorites\";\nimport Dislikes from \"./components/Dislikes\";\n\nclass App extends Component {\n\n  state = {\n    signUpSignInError: \"\",\n    authenticated: localStorage.getItem(\"token\") || false\n  }\n\n  handleSignUp = (credentials) => {\n    const { username, password, confirmPassword } = credentials;\n    if (!username.trim() || !password.trim() || !confirmPassword.trim()) {\n      this.setState({\n        signUpSignInError: \"Please provide all fields.\"\n      });\n    } else if (password.trim() !== confirmPassword.trim()) {\n      this.setState({\n        signUpSignInError: \"Passwords do not match.\"\n      });\n    } else {\n      this.setState({\n        signUpSignInError: 'Loading...',\n      })\n      fetch(`${process.env.REACT_APP_API_URL}/api/users`, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(credentials)\n      })\n        .then((res) => {\n          if (res.status === 422) {\n            res.json()\n              .then(\n                (err) => {\n                  console.log('username already exists', err);\n                  this.setState({\n                    signUpSignInError: err.error\n                  });\n                }\n              )\n          } else {\n            res.json().then(\n              (token) => {\n                localStorage.setItem('token', token);\n                this.setState({\n                  signUpSignInError: '',\n                  authenticated: token,\n                });\n              }\n            )\n          }\n        })\n    }\n  }\n\n  handleSignIn = (credentials) => {\n    const { username, password } = credentials;\n    if (!username.trim() || !password.trim()) {\n      this.setState({\n        signUpSignInError: 'Please provide all fields.',\n      });\n    } else {\n      this.setState({\n        signUpSignInError: 'Loading...',\n      })\n      fetch(`${process.env.REACT_APP_API_URL}/api/sessions`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(credentials),\n      })\n        .then((res) => {\n          if (res.status === 401) {\n            res.json().then(\n              (err) => {\n                console.log('invalid login', err);\n                this.setState({\n                  signUpSignInError: err.error,\n                });\n              }\n            )\n          } else {\n            res.json().then(\n              (data) => {\n                const token = data.token\n                localStorage.setItem('token', token);\n                this.setState({\n                  signUpSignInError: '',\n                  authenticated: token,\n                });\n              }\n            )\n          }\n        })\n    };\n  }\n\n  handleSignOut = () => {\n    localStorage.removeItem(\"token\");\n    this.setState({\n      authenticated: false\n    });\n  }\n\n  renderSignUpSignIn = () => {\n    return (\n      <SignUpSignIn\n        error={this.state.signUpSignInError}\n        onSignUp={this.handleSignUp}\n        onSignIn={this.handleSignIn}\n      />\n    );\n  }\n\n  renderApp() {\n    return (\n\n      <Router basename={process.env.REACT_APP_BASENAME}>\n        <div>\n          <Route exact path=\"/\" component={() => <Home onSignOut={this.handleSignOut} authenticated={this.state.authenticated} />} />\n          <Route path=\"/favorites\" component={Favorites} />\n          <Route path=\"/dislikes\" component={Dislikes} />\n        </div>\n      </Router>\n    );\n  }\n\n  render() {\n    let whatToShow = null;\n    if (this.state.authenticated) {\n      whatToShow = this.renderApp();\n    } else {\n      whatToShow = this.renderSignUpSignIn();\n    }\n\n    return whatToShow;\n\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as actionNames from '../Constants';\nimport { combineReducers } from \"redux\";\n\nfunction returnedRestaurant(state = {}, action) {\n    // if there is an action with type:RESTAURANT_SUCCESS, set it equal to the value from that action\n    if (action.type === actionNames.RESTAURANT_SUCCESS) {\n        return action.value;\n    } return state;\n}\n\nfunction isLoading(state = {}, action) {\n    if (action.type === actionNames.RESTAURANT_REQUEST) {\n        return action.value;\n    } return state\n}\n\nconst rootReducer = combineReducers({\n    returnedRestaurant, isLoading\n});\n\nexport default rootReducer;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport { Provider } from 'react-redux';\nimport reducers from './Reducers';\nimport thunk from 'redux-thunk';\nimport state from \"./state\";\n\n// calls old Fetch with a new function that adds a header token\nconst oldFetch = window.fetch;\nwindow.fetch = (url, settings = {}) => {\n    return oldFetch(url,\n        {\n            ...settings,\n            headers: { ...settings.headers, authorization: localStorage.getItem(\"token\") }\n        }\n    );\n};\n\nconst composeEnhancers = typeof window === \"object\" &&\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ?\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({}) : compose;\nconst enhancer = composeEnhancers(applyMiddleware(thunk));\n\nconst store = createStore(reducers, state, enhancer)\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}